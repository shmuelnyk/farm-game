.ant-form[data-v-45d9d2e6] {
  background: white;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  border: 1px solid grey;
  min-height: 300px;
  padding: 50px;
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  text-align: center;
  justify-content: space-between;
}

.question[data-v-7c322fcf] {
  border: 1px solid grey;
  padding: 15px;
  border-radius: 10px;
}
.question[data-v-7c322fcf]:hover {
  background-color: #40a9ff;
  color: white;
  border-color: #1890ff;
  cursor: pointer;
}
.question:hover h4[data-v-7c322fcf] {
  color: white;
}
.container-absolute[data-v-7c322fcf] {
  /*border: 1px solid grey;*/
  padding: 50px;
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
.container[data-v-7c322fcf] {
  /*border: 1px solid grey;*/
  padding: 50px;
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.align-center[data-v-7c322fcf] {
  text-align: center;
  flex-direction: column;
  justify-content: space-between;
}
.ant-layout-content[data-v-7c322fcf] {
  display: flex;
  justify-content: center;
}
.flex-col[data-v-7c322fcf] {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  min-height: 200px;
}
.loader[data-v-7c322fcf] {
  background: rgba(0, 0, 0, 0.4);
  position: fixed;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 999;
}
.loader .ant-spin[data-v-7c322fcf] {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.questions[data-v-7c322fcf] {
  text-align: center;
  display: flex;
  justify-content: space-between;
}
.questions h3[data-v-7c322fcf] {
  text-align: center;
}
.questions img[data-v-7c322fcf] {
  margin-bottom: 40px;
  margin-top: 20px;
  max-width: 100px;
  min-width: 100px;
  min-height: 100px;
  max-height: 100px;
  border-radius: 100%;
}
.crops[data-v-7c322fcf] {
  padding: 10px;
  margin: auto;
  width: 50%;
  border: 3px solid;
  font-size: 17px;
  margin-bottom: 20px;
}
.crops .amount[data-v-7c322fcf] {
  font-size: 30px;
}
.question-one[data-v-7c322fcf] {
  color: #75ab50 !important;
}
.question-one .ant-progress-text[data-v-7c322fcf] {
  color: #75ab50 !important;
}
.question-two[data-v-7c322fcf] {
  color: #609dd2 !important;
}
.question-two .ant-progress-text[data-v-7c322fcf] {
  color: #609dd2 !important;
}
.ant-card[data-v-7c322fcf] {
  padding: 5px;
  border-radius: 5px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
.ant-card .ant-card-body p[data-v-7c322fcf] {
  font-weight: 600;
  padding-bottom: 10px;
  border-bottom: 1px solid #e8e8e8;
}
.ant-card .ant-card-body p[data-v-7c322fcf]:last-child {
  border-bottom: 0px solid #e8e8e8;
}
.ant-card[data-v-7c322fcf]:hover {
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 2px 5px 0 #40a9ff;
  cursor: pointer;
}
.fade-enter-active[data-v-7c322fcf] {
  transition: opacity 0.2s;
}
.fade-leave-active[data-v-7c322fcf] {
  transition: opacity 0.4s;
}
.fade-enter[data-v-7c322fcf], .fade-leave-to[data-v-7c322fcf], .fade-leave-active[data-v-7c322fcf] {
  opacity: 0;
}


.main-container {
    width: 50vw;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}
.loader {
    background: rgba(0, 0, 0, 0.4);
    position: fixed;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    z-index: 999;
.ant-spin {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
}
}


body {
    background-color: #f0f2f5;
}
.piechart {
    margin-top: 300px;
    display: block;
    position: absolute;
    width: 400px;
    height: 400px;
    border-radius: 50%;
}

.piechart {
    display: flex;
    justify-content: center;
    align-items: center;
}
.ant-progress-text{
    display: none!important;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/