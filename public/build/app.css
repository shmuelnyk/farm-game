.ant-form[data-v-45d9d2e6] {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  border: 1px solid grey;
  min-height: 300px;
  padding: 50px;
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  text-align: center;
  justify-content: space-between;
}

.question[data-v-7c322fcf] {
  border: 1px solid grey;
  padding: 15px;
  border-radius: 10px;
}
.question[data-v-7c322fcf]:hover {
  background-color: #40a9ff;
  color: white;
  border-color: #1890ff;
  cursor: pointer;
}
.question:hover h4[data-v-7c322fcf] {
  color: white;
}
.container-absolute[data-v-7c322fcf] {
  width: 35vw;
  /*border: 1px solid grey;*/
  padding: 50px;
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
.container[data-v-7c322fcf] {
  width: 35vw;
  /*border: 1px solid grey;*/
  padding: 50px;
  border-radius: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.align-center[data-v-7c322fcf] {
  text-align: center;
  flex-direction: column;
  justify-content: space-between;
}
.ant-layout-content[data-v-7c322fcf] {
  display: flex;
  justify-content: center;
}
.flex-col[data-v-7c322fcf] {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  min-height: 200px;
}
.questions[data-v-7c322fcf] {
  display: flex;
  justify-content: space-between;
}


.main-container{
  width: 50vw;
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}


body {
    background-color: #f0f2f5;
}
.piechart {
    margin-top: 300px;
    display: block;
    position: absolute;
    width: 400px;
    height: 400px;
    border-radius: 50%;
}

.piechart {
    display: flex;
    justify-content: center;
    align-items: center;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/